openapi: '3.0.0'
info:
  title: Hackathon Relaxdays Aufgabe Lager
  version: '0.1.1'
servers:
  - url: http://0.0.0.0:8080
paths:
  /storagePlace:
    post:
      summary: add a storage place
      requestBody:
        required: true
        description: the storage place to add (version 0)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoragePlace'
      responses:
        200:
          description: OK
    get:
      summary: returns the storage place (version 0) with the name x
      parameters:
        - in: query
          name: x
          schema:
            type: string
          description: name x of the searched storage place
          required: true
      responses:
        '200':    # status code
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragePlace'
    put:
      summary: update data of a single storage place. it is identified by its name.
      requestBody:
        required: true
        description: the data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoragePlace'
      responses:
        '200':
          description: OK
    delete:
      summary: delete a storage place.
      parameters:
        - in: query
          name: x
          schema:
            type: string
          description: name of the storage place
          required: true
      responses:
        '200':
          description: OK
  /storagePlaces:
    get:
      summary: returns n storage places whose names are sorted after x
      parameters:
        - in: query
          name: x
          schema:
            type: string
        - in: query
          name: n
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/StoragePlace'
  /storagePlacesAtLocation:
    get:
      summary: return n storage places at location l whose names are sorted after x
      parameters:
        - in: query
          name: x
          schema:
            type: string
        - in: query
          name: n
          schema:
            type: integer
          required: true
        - in: query
          name: l
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StoragePlace'
  /v1/storagePlace:
    post:
      summary: add storage place specified by v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoragePlaceV1'
      responses:
        200:
          description: OK
    get:
      summary: returns the storage place with the name x
      parameters:
        - in: query
          name: x
          schema:
            type: string
          required: true
      responses:
        '200':    # status code
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragePlaceV1'
    put:
      summary: update data of a single storage place. it is identified by its name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoragePlaceV1'
      responses:
        '200':
          description: OK
    delete:
      summary: delete a storage place.
      parameters:
        - in: query
          name: x
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
  /v1/storagePlaces:
    get:
      summary: returns n storage places whose names are sorted after x
      parameters:
        - in: query
          name: x
          schema:
            type: string
        - in: query
          name: n
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StoragePlaceV1'
  /v2/storagePlace:
    post:
      summary: add storage place specified by v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoragePlaceV2'
      responses:
        200:
          description: OK
    get:
      summary: returns the storage place with the name x
      parameters:
        - in: query
          name: x
          schema:
            type: string
          description: name x of the searched storage place
          required: true
      responses:
        '200':    # status code
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragePlaceV2'
    put:
      summary: update data of a single storage place. it is identified by its name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoragePlaceV2'
      responses:
        '200':
          description: OK
    delete:
      summary: delete a storage place.
      parameters:
        - in: query
          name: x
          schema:
            type: string
          description: name of the storage place
          required: true
      responses:
        '200':
          description: OK
  /v2/storagePlaces:
    get:
      summary: returns n storage places whose names are sorted after x
      parameters:
        - in: query
          name: x
          schema:
            type: string
        - in: query
          name: n
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StoragePlaceV2'
  /v2/storagePlacesForArticleID:
    get:
      summary: returns any storage place where articles with given articleID currently are
      parameters:
        - in: query
          name: x
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StoragePlaceV2'
components:
  schemas:
    StoragePlace:
      type: object
      required:
        - name
        - articleID
        - bestand
      properties:
        name:
          type: string
        articleID: 
          type: integer
        bestand:
          type: integer
    StoragePlaceV1:
      type: object
      required:
        - standort
        - lagerabschnitt
        - reihe
        - platz
        - hoehe
        - articleID
        - bestand
      properties:
        standort:
          type: string
        lagerabschnitt:
          type: integer
        reihe:
          type: integer
        platz:
          type: integer
        hoehe:
          type: integer
        articleID: 
          type: integer
        bestand:
          type: integer
    StoragePlaceV2:
      type: object
      required:
        - standort
        - lagerabschnitt
        - reihe
        - platz
        - hoehe
        - articleID
        - bestand
        - kapazitaet
      properties:
        standort:
          type: string
        lagerabschnitt:
          type: integer
        reihe:
          type: integer
        platz:
          type: integer
        hoehe:
          type: integer
        articleID: 
          type: integer
        bestand:
          type: integer
        kapazitaet:
          type: integer